import pandas as pd
import numpy as np
from dataclasses import dataclass
from typing import List, Dict
import matplotlib.pyplot as plt

@dataclass
class Position:
    entry_price: float
    size: float
    level: int
    sell_target: float

class TradingStrategy:
    def __init__(self, buy_targets: List[float], sell_targets: List[float], 
                 initial_investments: List[float], debug=True):
        self.buy_targets = buy_targets
        self.sell_targets = sell_targets
        self.initial_investments = initial_investments
        self.positions: List[Position] = []
        self.cash = sum(initial_investments)
        self.initial_cash = self.cash
        self.twenty_four_hr_high = 0
        self.pending_orders: Dict[int, float] = {}
        self.debug = debug
        self.trades_history = []
        
    def log(self, message: str):
        if self.debug:
            print(message)

    def place_buy_order(self, level: int, current_price: float):
        """Place a new buy order for a specific level"""
        buy_price = current_price * (1 - self.buy_targets[level])
        self.pending_orders[level] = buy_price
        self.log(f"Placed buy order for level {level} at {buy_price:.2f}")
        return buy_price

    def execute_buy(self, level: int, order_price: float):
        investment = self.initial_investments[level]
        if self.cash >= investment:
            position_size = investment / order_price  # Use the limit order price
            sell_target = order_price * (1 + self.sell_targets[level])
            
            self.positions.append(Position(order_price, position_size, level, sell_target))
            self.cash -= investment
            
            self.trades_history.append({
                'type': 'BUY',
                'level': level,
                'price': order_price,  # Use the limit order price
                'size': position_size,
                'cash_used': investment
            })
            
            # self.log(f"Executed buy at level {level}: Price=${order_price:.2f}, Size={position_size:.4f}")
            return True
        return False

    def check_buy_signals(self, current_price: float):
        """Check for buy signals and execute at limit prices"""
        for level, limit_price in list(self.pending_orders.items()):
            if current_price <= limit_price:
                # Execute at the limit price, not the current price
                if self.execute_buy(level, limit_price):
                    del self.pending_orders[level]
                    # If this was level 0-10, place next level's order
                    if level < len(self.buy_targets) - 1:
                        self.place_buy_order(level + 1, limit_price)

    def execute_sell(self, position: Position, price: float):
        """Execute a sell order for the given position"""
        sale_proceeds = position.size * price
        self.cash += sale_proceeds
        
        self.trades_history.append({
            'type': 'SELL',
            'level': position.level,
            'price': price,
            'size': position.size,
            'cash_received': sale_proceeds,
            'profit': sale_proceeds - (position.size * position.entry_price)
        })
        
        #self.log(f"Executed sell at level {position.level}: Price=${price:.2f}, Profit=${sale_proceeds - (position.size * position.entry_price):.2f}")

    def update_24hr_high(self, price: float):
        if price > self.twenty_four_hr_high * 1.025:
            self.twenty_four_hr_high = price
            self.log(f"New 24hr high: {price:.2f}")
            # Update level 0 buy order
            self.place_buy_order(0, price)
    
    def calculate_performance_metrics(self, results: pd.DataFrame):
        """Calculate comprehensive performance metrics including annualized return and max drawdown"""
        # Ensure we have a proper datetime index
        if not isinstance(results.index, pd.DatetimeIndex):
            results.index = pd.to_datetime(results.index)
        
        initial_value = self.initial_cash
        final_value = results['portfolio_value'].iloc[-1]
        
        # Calculate total return
        total_return = ((final_value - initial_value) / initial_value) * 100
        
        # Calculate time period
        start_date = results.index[0]
        end_date = results.index[-1]
        
        # Calculate total days and years
        total_days = (end_date - start_date).total_seconds() / (24 * 60 * 60)
        years = total_days / 365.25
        
        # Print debug information
        print(f"Debug: Start date: {start_date}")
        print(f"Debug: End date: {end_date}")
        print(f"Debug: Total days: {total_days}")
        print(f"Debug: Years: {years}")
        
        # Calculate annualized return
        if years > 0:
            annualized_return = (((final_value / initial_value) ** (1/years)) - 1) * 100
        else:
            annualized_return = total_return
        
        # Calculate drawdown
        rolling_max = results['portfolio_value'].expanding().max()
        drawdowns = (results['portfolio_value'] - rolling_max) / rolling_max * 100
        max_drawdown = drawdowns.min()
        
        # Calculate drawdown periods
        is_drawdown = results['portfolio_value'] < rolling_max
        drawdown_periods = is_drawdown.astype(int).diff()
        drawdown_starts = results.index[drawdown_periods == 1]
        drawdown_ends = results.index[drawdown_periods == -1]
        
        # Calculate longest drawdown
        longest_drawdown_days = 0
        if len(drawdown_starts) > 0 and len(drawdown_ends) > 0:
            drawdown_lengths = [(end - start).total_seconds() / (24 * 60 * 60)
                              for start, end in zip(drawdown_starts, drawdown_ends)]
            longest_drawdown_days = int(max(drawdown_lengths)) if drawdown_lengths else 0
        
        return {
            'total_return': total_return,
            'annualized_return': annualized_return,
            'max_drawdown': max_drawdown,
            'longest_drawdown_days': longest_drawdown_days,
            'total_days': int(total_days),
            'sharpe_ratio': self.calculate_sharpe_ratio(results),
            'profit_factor': self.calculate_profit_factor()
        }

    # Also update the backtest method to ensure proper datetime handling:
    
    def backtest(self, price_data: pd.Series):
        """Run backtest with proper limit order execution"""
        # Convert index to datetime if it's not already
        if not isinstance(price_data.index, pd.DatetimeIndex):
            price_data.index = pd.to_datetime(price_data.index)
        
        # Sort the data by date to ensure proper chronological order
        price_data = price_data.sort_index()
        
        self.log("\nStarting backtest...")
        
        # Initialize first orders
        first_price = price_data.iloc[0]
        self.twenty_four_hr_high = first_price
        self.log(f"Initial price: {first_price:.2f}")
        
        # Place initial buy orders for all levels
        current_price = first_price
        for level in range(len(self.buy_targets)):
            buy_price = current_price * (1 - self.buy_targets[level])
            self.pending_orders[level] = buy_price
            self.log(f"Placed initial buy order for level {level} at {buy_price:.2f}")
            current_price = buy_price  # Next level's order based on previous level's buy price
        
        portfolio_values = []
        
        for timestamp, current_price in price_data.items():
            #self.log(f"\nProcessing {timestamp}: Price=${current_price:.2f}")
            
            # Update 24hr high if needed
            if current_price > self.twenty_four_hr_high * 1.025:
                old_high = self.twenty_four_hr_high
                self.twenty_four_hr_high = current_price
                self.log(f"New 24hr high: {current_price:.2f} (old: {old_high:.2f})")
                # Update level 0 buy order
                level_0_price = current_price * (1 - self.buy_targets[0])
                self.pending_orders[0] = level_0_price
                self.log(f"Updated level 0 buy order to: {level_0_price:.2f}")
            
            # Check sell signals first
            for pos in self.positions[:]:
                if current_price >= pos.sell_target:
                    # Execute sell at the target price
                    sale_proceeds = pos.size * pos.sell_target
                    self.cash += sale_proceeds
                    profit = sale_proceeds - (pos.size * pos.entry_price)
                    
                    self.trades_history.append({
                        'type': 'SELL',
                        'level': pos.level,
                        'price': pos.sell_target,
                        'size': pos.size,
                        'cash_received': sale_proceeds,
                        'profit': profit
                    })
                    
                    #self.log(f"Executed sell at level {pos.level}: Price=${pos.sell_target:.2f}, Profit=${profit:.2f}")
                    self.positions.remove(pos)
                    
                    # Place new buy order for this level
                    new_buy_price = current_price * (1 - self.buy_targets[pos.level])
                    self.pending_orders[pos.level] = new_buy_price
                    #self.log(f"Placed new buy order for level {pos.level} at {new_buy_price:.2f}")
            
            # Check buy signals
            for level, limit_price in list(self.pending_orders.items()):
                if current_price <= limit_price:
                    # Execute the buy AT THE LIMIT PRICE
                    investment = self.initial_investments[level]
                    if self.cash >= investment:
                        position_size = investment / limit_price  # Use limit price for position size
                        sell_target = limit_price * (1 + self.sell_targets[level])
                        
                        self.positions.append(Position(limit_price, position_size, level, sell_target))
                        self.cash -= investment
                        
                        self.trades_history.append({
                            'type': 'BUY',
                            'level': level,
                            'price': limit_price,  # Use the limit price, not current_price
                            'size': position_size,
                            'cash_used': investment
                        })
                        
                        #self.log(f"Executed buy at level {level}: Price=${limit_price:.2f}, Size={position_size:.4f}")
                        del self.pending_orders[level]
                        
                        # Place next level's order if applicable
                        if level < len(self.buy_targets) - 1:
                            next_buy_price = limit_price * (1 - self.buy_targets[level + 1])
                            self.pending_orders[level + 1] = next_buy_price
                            #self.log(f"Placed next level {level + 1} buy order at {next_buy_price:.2f}")
            
            # Calculate current portfolio value
            portfolio_value = self.cash + sum(pos.size * current_price for pos in self.positions)
            portfolio_values.append({
                'timestamp': timestamp,
                'portfolio_value': portfolio_value,
                'price': current_price,
                'active_positions': len(self.positions),
                'pending_orders': len(self.pending_orders),
                'cash': self.cash
            })
        
        results = pd.DataFrame(portfolio_values)
        results['timestamp'] = results['timestamp'].astype('datetime64[ns]')
        results.set_index('timestamp', inplace=True)
        return results

    def calculate_sharpe_ratio(self, results: pd.DataFrame, risk_free_rate=0.02):
        """Calculate Sharpe Ratio using daily returns"""
        daily_returns = results['portfolio_value'].pct_change()
        excess_returns = daily_returns - risk_free_rate/365
        if len(excess_returns) > 1:
            sharpe_ratio = np.sqrt(365) * (excess_returns.mean() / excess_returns.std())
            return sharpe_ratio
        return 0
    
    def calculate_profit_factor(self):
        """Calculate profit factor (gross profits / gross losses)"""
        profits = [trade['profit'] for trade in self.trades_history if 'profit' in trade]
        if not profits:
            return 0
        
        gross_profits = sum(p for p in profits if p > 0)
        gross_losses = abs(sum(p for p in profits if p < 0))
        
        return gross_profits / gross_losses if gross_losses != 0 else float('inf')
    
    # Update the print_summary method:
    
    def print_summary(self, results: pd.DataFrame):
        metrics = self.calculate_performance_metrics(results)
        
        print("\n=== Trading Summary ===")
        print(f"Initial Portfolio: ${self.initial_cash:,.2f}")
        final_value = results['portfolio_value'].iloc[-1]
        print(f"Final Portfolio: ${final_value:,.2f}")
        
        print(f"\nPerformance Metrics:")
        print(f"Total Return: {metrics['total_return']:.2f}%")
        print(f"Annualized Return: {metrics['annualized_return']:.2f}%")
        print(f"Maximum Drawdown: {metrics['max_drawdown']:.2f}%")
        print(f"Longest Drawdown Period: {metrics['longest_drawdown_days']} days")
        print(f"Sharpe Ratio: {metrics['sharpe_ratio']:.2f}")
        print(f"Profit Factor: {metrics['profit_factor']:.2f}")
        
        print(f"\nTrading Statistics:")
        print(f"Total Trading Days: {metrics['total_days']}")
        print(f"Total Trades: {len(self.trades_history)}")
        print(f"Active Positions: {len(self.positions)}")
        print(f"Pending Orders: {len(self.pending_orders)}")
        
        if self.trades_history:
            profits = [trade['profit'] for trade in self.trades_history if 'profit' in trade]
            if profits:
                print(f"Total Profit/Loss: ${sum(profits):,.2f}")
                winning_trades = len([p for p in profits if p > 0])
                total_trades = len(profits)
                win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
                print(f"Win Rate: {win_rate:.1f}% ({winning_trades}/{total_trades})")
        
        print("\nCurrent Positions:")
        for pos in self.positions:
            print(f"Level {pos.level}: Entry=${pos.entry_price:.2f}, Target=${pos.sell_target:.2f}")
        
        print("\nPending Orders:")
        for level, price in sorted(self.pending_orders.items()):
            print(f"Level {level}: ${price:.2f}")
    
    # Add a new plotting method for drawdown visualization:
    
    def plot_metrics(self, results: pd.DataFrame):
        """Plot price, portfolio value, and drawdown chart"""
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 12), gridspec_kw={'height_ratios': [2, 1]})
        
        # Plot price and portfolio value
        ax1.plot(results.index, results['portfolio_value'], label='Portfolio Value')
        ax1.plot(results.index, results['price'], label='ETH Price', alpha=0.6)
        ax1.set_title('ETH Trading Strategy Performance')
        ax1.set_xlabel('Date')
        ax1.set_ylabel('Value ($)')
        ax1.legend()
        ax1.grid(True)
        
        # Calculate and plot drawdown
        rolling_max = results['portfolio_value'].expanding().max()
        drawdown = (results['portfolio_value'] - rolling_max) / rolling_max * 100
        
        ax2.fill_between(results.index, drawdown, 0, color='red', alpha=0.3)
        ax2.set_title('Portfolio Drawdown')
        ax2.set_xlabel('Date')
        ax2.set_ylabel('Drawdown (%)')
        ax2.grid(True)
        
        plt.tight_layout()
        plt.show()


# import data
close_prices = pd.read_csv("usdt_price_data.csv")
close_prices['timestamp'] = pd.to_datetime(close_prices['timestamp'])
close_prices.set_index('timestamp', inplace=True)
eth_data = close_prices['ETH']

buy_targets = [0.04, 0.06, 0.08, 0.1, 0.04, 0.06, 0.08, 0.1, 0.15, 0.2, 0.3]
sell_targets = [0.03, 0.04, 0.06, 0.07, 0.03, 0.04, 0.06, 0.07, 0.08, 0.09, 0.10]
initial_investments = [800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800]

strategy = TradingStrategy(buy_targets, sell_targets, initial_investments)
results = strategy.backtest(eth_data)
strategy.print_summary(results)
strategy.plot_metrics(results)

# Let's print first few trades that should happen based on initial price
initial_price = eth_data.iloc[0]  # 728.91
print(f"Initial price: ${initial_price:.2f}")
print("\nExpected initial orders:")
print(f"Level 0 buy order: ${initial_price * (1-0.04):.2f}")  # Should be around $699.75
print(f"Level 0 sell target if filled: ${initial_price * (1-0.04) * (1+0.03):.2f}")  # Should be around $720.74

# Run backtest
results = strategy.backtest(eth_data)


# Plot results including trade executions
plt.figure(figsize=(15, 8))
plt.figure(figsize=(15, 8))
plt.plot(results.index, results['portfolio_value'], label='Portfolio Value')
plt.plot(results.index, results['price'], label='ETH Price', alpha=0.6)
plt.title('ETH Trading Strategy Performance')
plt.xlabel('Date')
plt.ylabel('Value ($)')
plt.legend()
plt.grid(True)
plt.show()
